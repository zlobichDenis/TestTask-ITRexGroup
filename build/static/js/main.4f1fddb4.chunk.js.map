{"version":3,"sources":["components/column/column.jsx","components/row/row.jsx","components/table/table.jsx","components/filters/filters.jsx","components/search/search.jsx","components/table-buttons/table-buttons.jsx","components/show-container/show-container.jsx","components/app/App.js","index.js"],"names":["Column","props","fieldValue","this","React","Component","Row","person","onChangeActivePerson","columnsOfPerson","Object","keys","map","key","keyModifier","Math","random","state","id","onClick","Table","currentIndexOfData","data","activeFieldOfSort","onChangeActiveFieldOfSort","activeFieldTitle","field","direction","rowsOfTable","headRow","activeStyle","color","style","evt","value","sortField","target","width","height","border","Filters","availableStates","onChangeActiveFilter","options","Array","from","className","onChange","activeFilter","defaultValue","Search","onChangeSubstringInSearch","onBlur","type","TableButtons","typesOfButtons","NEXT","PREV","INDEX","numberOfButtons","onChangeCurrentIndex","pageButtons","fill","item","index","disabled","name","ShowContainer","firstName","lastName","description","adress","streetAddress","city","zip","App","currentActivePerson","substringInSeatch","showedPersons","bind","preparedData","maxNumberOfPersonsPerPage","sliceArr","firstIndex","secondIndex","length","push","slice","sort","a","b","localeCompare","email","phone","filter","substring","dataWithSubstring","includes","splitDataByPage","filteredData","setState","typeOfButton","prevState","Set","forEach","add","string","sortedData","getSortedData","prepareDataForRenderingByFilter","getTheAvailableStates","json","url","xhr","XMLHttpRequest","open","send","response","getResponse","JSON","parse","getData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f1fddb4.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\nexport default class Column extends React.Component {\n    constructor(props){\n        super(props)\n\n        this.props = props;\n    }\n\n    render() {\n        const { fieldValue } = this.props;\n        return (\n            <td>{ fieldValue }</td>\n        )\n    }\n}\n\nColumn.propTypes = {\n    fieldValue: PropTypes.any.isRequired,\n}","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Column from \"../column/column\";\n\nexport default class Row extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.props = props\n    }\n\n    render() {\n        const { person, onChangeActivePerson } = this.props;\n\n        const columnsOfPerson = Object.keys(person).map((key) => {\n            const keyModifier = Math.random() * 10;\n            if (key === 'adress') {\n                return <Column key={`person${person[key].id + keyModifier}__${key}`} fieldValue={person[key].state} />\n            } else if (key === 'description') {\n                return undefined;\n            }\n            return <Column key={`person${person[key].id + keyModifier}__${key}`} fieldValue={person[key]} />\n        });\n\n        return (\n            <tbody>\n                <tr onClick={onChangeActivePerson}>\n                    {columnsOfPerson}\n                </tr>\n            </tbody>\n        )\n    }\n}\n\nRow.propTypes = {\n    person: PropTypes.object.isRequired,\n    onChangeActivePerson: PropTypes.func.isRequired,\n}","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Row from \"../row/row\";\n\nexport default class Table extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentIndexOfData: 0,\n        };\n\n        this.props = props;\n    }\n\n    render() {\n        const { data, onChangeActivePerson, activeFieldOfSort, onChangeActiveFieldOfSort } = this.props;\n        const { field: activeFieldTitle, direction } = activeFieldOfSort;\n\n        const rowsOfTable = data.map((person) => {\n            const keyModifier = Math.random() * 10;\n            return <Row onChangeActivePerson={() => onChangeActivePerson(person)} key={person.id + keyModifier} person={person}/>\n        });\n\n        const headRow = Object.keys(data[0]).map((key) => {\n            const activeStyle = activeFieldTitle === key && direction === true ? {color:'red'} : {color:'blue'};\n            if (key === 'adress') {\n                return (\n                    <th key={`head-row__state`}>\n                        <button \n                            style={activeFieldTitle === 'state' && direction ? {color:'red'} : {color:'blue'}}\n                            onClick={(evt) => {\n                                const sortField = 'state';\n                                const isDecrease = activeFieldTitle === 'state' ? !direction : true;\n                                const fieldOfSort = {\n                                    field: sortField,\n                                    direction: isDecrease,\n                                }\n                                onChangeActiveFieldOfSort(fieldOfSort)\n                            }}\n                            key={`sort-button-${key}`} \n                            value='state'>To top/down\n                        </button>state\n                    </th>\n                )\n            } else if (key === 'description') {\n                return undefined;\n            }\n            return (\n                <th key={`head-row__${key}`}>\n                    <button \n                        style={activeStyle} \n                        onClick={(evt) => {\n                            const sortField = evt.target.value;\n                            const isDecrease = activeFieldTitle === key ? !direction : true;\n                            const fieldOfSort = {\n                                    field: sortField,\n                                    direction: isDecrease,\n                                }\n                            onChangeActiveFieldOfSort(fieldOfSort)\n                            }} \n                        key={`sort-button-${key}`} \n                        value={key}>To top/down\n                    </button>{key}\n                </th>\n            )\n        })\n\n        return (\n            <table style={{width:'100%', height: '400px'}} border=\"1\">\n                <thead>               \n                    <tr>\n                        {headRow}\n                    </tr>\n                </thead>\n                {rowsOfTable}\n            </table>\n        )\n    }\n}\n\nTable.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onChangeActivePerson: PropTypes.func.isRequired,\n    activeFieldOfSort: PropTypes.object.isRequired,\n    onChangeActiveFieldOfSort: PropTypes.func.isRequired,\n}","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nexport default class Filters extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.props = props;\n    }\n\n    render() {\n        const { availableStates, onChangeActiveFilter } = this.props;\n        const options = Array.from(availableStates).map((state) => {\n            return (\n                <option \n                    key={`state-${state}`} \n                    className=\"\" \n                    value={state}>\n                {state}\n                </option>\n            )\n        })\n        return (\n            <select                    \n                onChange={(evt) => {\n                    const activeFilter = evt.target.value;\n                    onChangeActiveFilter(activeFilter)\n                }}  \n                defaultValue='to-high' \n                className=\"places__sorting-type\" \n                id=\"places-sorting\">\n                <option \n                    key={`state-${'None'}`} \n                    className=\"\" \n                    value={'NONE'}>\n                    NONE\n                </option>\n                {options}\n            </select>\n        )\n    }\n}\n\nFilters.propTypes = {\n    availableStates: PropTypes.object.isRequired,\n    onChangeActiveFilter: PropTypes.func.isRequired,\n}","import React from \"react\";\n\nexport default class Search extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.props = props;\n    }\n\n    render() {\n        const { onChangeSubstringInSearch } = this.props;\n        return (\n            <input onBlur={(evt) => onChangeSubstringInSearch(evt.target.value)} type='text'></input>\n        )\n    }\n}","import React from \"react\";\nimport PropTypes from 'prop-types';\n\n\nexport default class TableButtons extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.props = props;\n        this.typesOfButtons = {\n            NEXT: 'NEXT',\n            PREV: 'PREV',\n            INDEX: 'INDEX',\n        }\n    }\n\n    render() {\n        const { numberOfButtons, onChangeCurrentIndex, currentIndexOfData } = this.props;\n\n        const pageButtons = new Array(numberOfButtons).fill(null).map((item, index) => {\n            const keyModifier = Math.random() * 15;\n            return (\n                <button \n                    disabled={index === currentIndexOfData ? true : false}\n                    key={keyModifier}\n                    onClick={(evt) => {\n                        const index = +evt.target.value;\n                        onChangeCurrentIndex(index, this.typesOfButtons.INDEX);\n                    }} \n                    value={index} \n                    name={`button-page-${index}`}>{index + 1}\n                </button>\n            )\n        })\n        return (\n            <div>\n                <button \n                    onClick={() => {\n                        onChangeCurrentIndex(null, this.typesOfButtons.PREV);\n                    }} \n                    name='prev-page'\n                    disabled={currentIndexOfData === 0 ? true : false}\n                    >\n                    Prev\n                </button>\n                {pageButtons}\n                <button \n                    onClick={() => {\n                        onChangeCurrentIndex(null, this.typesOfButtons.NEXT);\n                    }} \n                    name='next-page'\n                    disabled={currentIndexOfData === 5 || numberOfButtons <= 1 ? true : false}\n                    >\n                    Next\n                </button>\n            </div>\n        )\n    }\n}\n\nTableButtons.propTypes = {\n    numberOfButtons: PropTypes.number.isRequired,\n    onChangeCurrentIndex: PropTypes.func.isRequired,\n    currentIndexOfData: PropTypes.number.isRequired,\n}","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nexport default class ShowContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.props = props;\n    }\n\n    render() {\n        const { firstName, lastName, description, adress } = this.props.person;\n        return (\n            <div>\n                <h3>Profile info:</h3>\n                <p>Selected profile: <span>{`${firstName} ${lastName}`}</span></p>\n                <p>Description: <span>{description}</span></p>\n                <p>Adress: <span>{adress.streetAddress}</span></p>\n                <p>City: <span>{adress.city}</span></p>\n                <p>State: <span>{adress.state}</span></p>\n                <p>Index: <span>{adress.zip}</span></p>\n            </div>\n        )\n    }\n}\n\nShowContainer.propTypes = {\n    person: PropTypes.object,\n}","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Table from \"../table/table\";\nimport Filters from \"../filters/filters\";\nimport Search from \"../search/search\";\nimport TableButtons from \"../table-buttons/table-buttons\";\nimport ShowContainer from \"../show-container/show-container\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.props = props;\n\n    this.state = {\n      currentIndexOfData: 0,\n      currentActivePerson: null,\n      activeFilter: 'NONE',\n      activeFieldOfSort: {},\n      substringInSeatch: '',\n  };\n\n    this.showedPersons = [];\n\n    this.onChangeActivePerson = this.onChangeActivePerson.bind(this);\n    this.onChangeCurrentIndex = this.onChangeCurrentIndex.bind(this);\n    this.onChangeActiveFilter = this.onChangeActiveFilter.bind(this);\n    this.onChangeActiveFieldOfSort = this.onChangeActiveFieldOfSort.bind(this);\n    this.onChangeSubstringInSearch = this.onChangeSubstringInSearch.bind(this);\n }\n\n  splitDataByPage(data) {\n    let preparedData = [];\n    const maxNumberOfPersonsPerPage = 20;\n\n    (function sliceArr(firstIndex = 0, secondIndex = 20) {\n      if (firstIndex === data.length) {\n        return;\n      }\n      if (data.length <= maxNumberOfPersonsPerPage) {\n        secondIndex = data.length;\n        preparedData.push(data.slice(firstIndex, secondIndex));\n        return;\n      }\n      preparedData.push(data.slice(firstIndex, secondIndex))\n      firstIndex += maxNumberOfPersonsPerPage;\n      secondIndex += maxNumberOfPersonsPerPage;\n      return sliceArr(firstIndex, secondIndex);\n    })();\n\n    return preparedData;\n  }\n\n  getSortedData(data, sortField) {\n    const { field, direction } = sortField;\n  \n    switch (field) {\n      case 'id':\n        if (direction) {\n          return data.slice().sort((a, b) => b.id - a.id);\n        }\n        return data.slice().sort((a, b) => a.id - b.id);\n      case 'firstName':\n        if (direction) {\n          return data.slice().sort((a, b) => b.firstName.localeCompare(a.firstName));\n        }\n        return data.slice().sort((a, b) => a.firstName.localeCompare(b.firstName));\n      case 'lastName':\n        if (direction) {\n          return data.slice().sort((a, b) => b.lastName.localeCompare(a.lastName));\n        }\n        return data.slice().sort((a, b) => a.lastName.localeCompare(b.lastName));\n      case 'email':\n        if (direction) {\n          return data.slice().sort((a, b) => b.email.localeCompare(a.email));\n        }\n        return data.slice().sort((a, b) => a.email.localeCompare(b.email));\n      case 'phone':\n        if (direction) {\n          return data.slice().sort((a, b) => b.phone[1].localeCompare(a.phone[1]));\n        }\n        return data.slice().sort((a, b) => a.phone[1].localeCompare(b.phone[1]));\n      case 'state': \n        if (direction) {\n          return data.slice().sort((a, b) => b.adress.state.localeCompare(a.adress.state));\n        }\n        return data.slice().sort((a, b) => a.adress.state.localeCompare(b.adress.state));\n      default:\n        return data;\n    }\n  }\n\n  prepareDataForRenderingByFilter(data, filter, substring) {\n    let preparedData\n    if (filter === 'NONE') {\n      if (substring) {\n        let dataWithSubstring = data.filter((person) => person.firstName.includes(substring));\n\n        return preparedData = dataWithSubstring.length > 0 ? this.splitDataByPage(dataWithSubstring) : this.splitDataByPage(data);\n      }\n      preparedData = this.splitDataByPage(data);\n      return preparedData;\n    } else {\n\n      let filteredData = data.filter((item) => item.adress.state === filter);\n      preparedData = this.splitDataByPage(filteredData)\n      return preparedData;\n    }\n }\n\n  onChangeActivePerson(person) {\n    this.setState({\n      currentActivePerson: person,\n    })\n }\n\n  onChangeCurrentIndex(index, typeOfButton) {\n    switch (typeOfButton) {\n      case 'NEXT':\n        this.setState(prevState => ({\n          currentIndexOfData: prevState.currentIndexOfData + 1,\n        }))\n\n        break;\n\n      case 'PREV':\n        this.setState(prevState => ({\n          currentIndexOfData: prevState.currentIndexOfData -1,\n        }))\n        break;\n\n      default:\n        this.setState({\n          currentIndexOfData: index,\n        })\n    }\n\n }\n\n  getTheAvailableStates(data) {\n    let availableStates = new Set();\n    data.forEach((person) => {\n      availableStates.add(person.adress.state);\n    })\n    \n    return availableStates\n  }\n\n  onChangeActiveFilter(activeFilter) {\n    this.setState({\n      activeFilter: activeFilter,\n      currentIndexOfData: 0,\n      activeFieldOfSort: {},\n    })\n  }\n\n  onChangeActiveFieldOfSort(sortField) {\n    this.setState({\n      activeFieldOfSort: sortField,\n      currentIndexOfData: 0,\n    })\n  }\n\n  onChangeSubstringInSearch(string) {\n    this.setState({\n      substringInSeatch: string,\n      activeFieldOfSort: {},\n      currentIndexOfData: 0,\n    })\n  }\n\n\n\n  render() {\n    const { data } = this.props;\n    let { activeFilter, activeFieldOfSort, substringInSeatch } = this.state;\n    let sortedData = this.getSortedData(data, activeFieldOfSort);\n    this.showedPersons = this.prepareDataForRenderingByFilter(sortedData, activeFilter, substringInSeatch);\n    let availableStates = this.getTheAvailableStates(sortedData);\n    const { currentIndexOfData, currentActivePerson } = this.state;\n\n\n    return (\n      <div className=\"App\">\n        <Search onChangeSubstringInSearch={this.onChangeSubstringInSearch}/>\n        <Filters onChangeActiveFilter={this.onChangeActiveFilter} availableStates={availableStates}/>\n        <Table onChangeActiveFieldOfSort={this.onChangeActiveFieldOfSort} activeFieldOfSort={activeFieldOfSort} onChangeActivePerson={this.onChangeActivePerson} data={this.showedPersons[currentIndexOfData]}/>\n        <TableButtons currentIndexOfData={currentIndexOfData} onChangeCurrentIndex={this.onChangeCurrentIndex} numberOfButtons={this.showedPersons.length}/>\n        {currentActivePerson ? <ShowContainer person={currentActivePerson} /> : null }\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nfunction getData() {\n  const url = 'https://itrex-react-lab-files.s3.eu-central-1.amazonaws.com/react-test-api.json';\n  const getResponse = (url) => { \n      const xhr = new XMLHttpRequest();\n      xhr.open(`GET`, url, false); \n      xhr.send();\n      return xhr.response; \n  };\n  const json = getResponse(url);\n  const data = JSON.parse(json)\n      .sort((a, b) => a.id - b.id);\n  return data;\n};\n\nconst data = getData();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App data={data}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}